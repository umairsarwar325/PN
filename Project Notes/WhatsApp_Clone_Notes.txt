--------- WHATSAPP_CLONE ---------

1. Dependencies
  -> client
    - "next":
    - "react": 
    - "react-dom": 
    - "postcss": 
    - "tailwindcss": 
    - "autoprefixer": 
    - "axios": for api calling
    - "emoji-picker-react": for emojis
    - "firebase": for auth
    - "react-icons": for icons
    - "react-image-file-resizer": for resizig the images
    - "socket.io-client": for client side sockets
    - "wavesurfer.js": for audio wave forms
    - "zego-express-engine-webrtc": for video and audio calling

  -> server
    - "@prisma/client": for database management
    - "cors": for handling cross origin requests
    - "crypto": for token genration
    - "dotenv": for envionment variable
    - "express": for apis
    - "multer": for handling files
    - "nodemon": for starting the server
    - "prisma": 
    - "socket.io": for server side sockets
  
2. Setup Firebase auth
  -> setup firebaseConfig and export firebaseAuth (utils/FirebaseConfig.js)
  
3. Setup Prisma (In Server Folder)
  -> npx prisma init
  -> in .env
    - DATABASE_URL="mongodb://localhost:27017/WhatsAppClone"
  -> in prisma/schema.prisma
    - Setup DataBase
      datasource db {
        provider = "mongodb"
        url      = env("DATABASE_URL")
      }
    - Setup Models
      model User {
        Id Int @id @map("_id")
        email String @unique
      }
  -> npx prisma generate
  -> npx prisma db push 
  -> npx prisma studio 

  -> To use prisma create a prisma client (utils/prismaClient.js)
      import { PrismaClient } from "@prisma/client";

      let prismaInstance = null;

      const getPrismaInstance = () => {
        if (!prismaInstance) {
          prismaInstance = new PrismaClient();
        }
        return prismaInstance;
      };

4. Setup Node Server (In Server Folder)
  -> create APIs

5. Login with Google
    const provider = new GoogleAuthProvider();
    const { user } = await signInWithPopup(firebaseAuth, provider);

6. Setup Redux store

7. Creating Conext Menu (components/common/ContextMenu.jsx)

8. React Portal (components/common/PhotoPicker.jsx)
  -> by default react renders components inside root (in NEXT renders inside _next)
  -> using portals we tell NEXT to render the components inside custom div
    
9. Created take photo, choose from library & upload photo features (avatar.js, onboarding/page.jsx)  

10. built "create-user" api (server/controllers/AuthController.js)  

11. on route changes checking in client app if user is still loggged in using firebase auth:
       onAuthStateChanged(firebaseAuth, async (currentUser) => {
          if (!currentUser) {
            setRedirectLogin(true);
          }
          if (!userInfo && currentUser?.email) {
            const { data } = await axios.post(CHECK_USER_ROUTE, {
              email: currentUser?.email,
            });
            if (data.status && data.data) {
              const { id, email, name, about, profilePicture } = data.data;
              dispatch(setNewUser(false));
              dispatch(
                setUserInfo({
                  id,
                  email,
                  name,
                  status: about,
                  profilePicture,
                })
              );
            } else {
              dispatch(setUserInfo(null));
              dispatch(setNewUser(false));
              router.push("/login");
            }
          }
        });

12. built "get-contacts" api (server/controllers/AuthController.js) and implemented in client (components/Chatlist/ContactList.jsx)
    -> Api: merged all the contacts in groups having same intial lettter.
    -> Client: on page load fetched all contact groups in the form of an object and mapped that object to render all contacts.
        Object.entries(allContacts).map(([intialLetter, userList]) => {
          return (
            <div key={Date.now() + intialLetter}>
              ... other_stuff(see components/Chatlist/ContactList.jsx)
            </div>
          );
        })

12. sockets
    -> server/index.js
      - make a socket connection

      import { Server } from "socket.io";

      const server = app.listen(process.env.PORT, () => {
        console.log("server started on port:", process.env.PORT); //PORT = 3005
      });

      const io = new Server(server, {
        cors: {
          origin: "http://localhost:3000", // client's URL
        },
      });  // Establlishing the socket

      global.onlineUsers = new Map(); // a global map to maintain sockets and users. Will maintain online and offline status of the users. no reptative values
      
      io.on("connection", (socket) => {
        // event "io.on" runs on new connection request
        global.chatSocket = socket; // set the socket in global chatSocket
        socket.on("add-user", (userId) => {
          // event "socket.on" runs on add-user event gets the userId(passed from frontend) and sets that userId and socket id inside onlineUsers
          onlineUsers.set(userId, socket.id);
        });
        socket.on("send-msg", (data) => {
          const sendUserSocket = onlineUsers.get(data.to);
          if (sendUserSocket) {
            socket.to(sendUserSocket).emit("msg-received", {
              from: data.from,
              to: data.to,
              message: data.message,
            });
          }
        });
      });

    -> server/controllers/MessageController.js
      - controller for addMessage and getMessages
       const getUser = onlineUsers.get(to); // checks if sender is online

    -> in client
      - components/Main.jsx

        import { io } from "socket.io-client";

        const socket = useRef();

        useEffect(() => {
          if (userInfo) {
            socket.current = io(HOST); // "http://localhost:3005"
            socket.current.emit("add-user", userInfo.id); // emiting add-user event that is created in backend
            dispatch(setSocket(socket.current)); // set the global socket to emit other events (send message , etc)
          }
        }, [userInfo]);

         useEffect(() => {
          if (socket.current) {
            socket.current.on("msg-received", (data) => {
              // event "socket.on" runs when new message is recieved
              dispatch(addMessage({ ...data.message })); // adding new message to messages(global store state)
            });
            setSocketEvent(true);
          }
        }, [socket.current]);
      - send message using ADD_MESSAGE Api (Chat/MessageBar.jsx)
         
         const sendMessageHandler = async () => {
          try {
            setIsLoading(true);
            const { data } = await axios.post(ADD_MESSAGE, {
              to: currentChatUser?.id,
              from: userInfo?.id,
              message,
            });
            socket.emit("send-msg", {
              to: currentChatUser?.id,
              from: userInfo?.id,
              message: data?.message,
            }); // emiting send-msg event, we must add this event in server/index.js
            setMessage("");
            setIsLoading(false);
          } catch (error) {
            setIsLoading(false);
            console.log(error);
          }
        };
      - get and show messages using GET_MESSAGE Api (components/Main.jsx and ChatCntainer.jsx)
      
13. EmojiPicker (in MessageBar.jsx)    

14. Image Upload 
    - client (MessageBar.jsx -> handlePicChange)    
    - server 
        - app.use("/uploads/images", express.static("uploads/images")); // to serve images to client from ("uploads/images") whenever this route hits
        - a new route to store images (/add-image-message)    
        - used multer diskStorage    

15. Audio Messages 
    - client 
      - (components/common/CaptureAudio.jsx) used wavesurfer.js to show wave forms   
      - import this component in MessageBar.jsx dynamically
          import dynamic from "next/dynamic";
          const CaptureAudio = dynamic(() => import("../common/CaptureAudio"), {
            ssr: false,
          });
    - server 
        - app.use("/uploads/recordings", express.static("uploads/recordings")); // to serve recordings to client from ("uploads/images") whenever this route hits
        - a new route to store recordings (/add-audio-message)    
        - used multer diskStorage    

16. Messages Search
    - client 
      - (components/Chat/SearchMessage.jsx)   
      - (components/ChatList/List.jsx)
      - (components/ChatList/ContactList.jsx)

17. Video and Audio Calls
    - sockets: integrated sockets for video and audio calls
    - zego_cloud: created a project in zegocloud dashboard and integrated in server and client
        (inside authCntorller a new Controller to genrate the token)
        (inside components/Call/Container.jsx setup for zegocloud video and audio call)




















































































  